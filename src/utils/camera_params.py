import numpy as np
import yaml
import os

class CameraParams:
    """
    A class to store and manage camera intrinsic parameters, including the camera matrix (K)
    and distortion coefficients. It can load these parameters from a YAML calibration file
    generated by `scripts/calibrate_camera.py` or initialize them with placeholder values
    if no file is provided or if loading fails.
    """
    def __init__(self, calibration_file_path: str = None, 
                 default_image_width: int = 640, default_image_height: int = 480):
        """
        Initializes camera parameters. Attempts to load from a calibration file if provided;
        otherwise, uses placeholder values.

        Args:
            calibration_file_path (str, optional): Path to the YAML calibration file.
                                                   If None or if the file is invalid/not found,
                                                   placeholder parameters will be used. Defaults to None.
            default_image_width (int): Default image width to use if initializing with placeholders.
                                       Defaults to 640.
            default_image_height (int): Default image height to use if initializing with placeholders.
                                        Defaults to 480.
        """
        self.K: np.ndarray = None
        self.dist_coeffs: np.ndarray = None
        self.image_width = default_image_width
        self.image_height = default_image_height

        if calibration_file_path and os.path.exists(calibration_file_path):
            if self.load_calibration(calibration_file_path):
                print(f"Successfully loaded camera calibration from: {calibration_file_path}")
            else:
                print(f"Warning: Failed to load camera calibration from: {calibration_file_path}. Using placeholders.")
                self._initialize_placeholders()
        else:
            if calibration_file_path: # Path provided but does not exist
                print(f"Warning: Calibration file not found at: {calibration_file_path}. Using placeholders.")
            else: # No path provided
                print("Warning: No calibration file provided. Using placeholder camera parameters.")
            self._initialize_placeholders()

    def _initialize_placeholders(self, fx=550.0, fy=550.0):
        """
        Initializes camera parameters with placeholder values.
        Image width and height are taken from `self.image_width` and `self.image_height`,
        which should be set prior to calling this method (typically in `__init__`).

        Args:
            fx (float): Placeholder focal length in x-axis (pixels).
            fy (float): Placeholder focal length in y-axis (pixels).
        """
        # Ensure image_width and image_height are set before calculating cx, cy
        if self.image_width is None or self.image_height is None:
            raise ValueError("image_width and image_height must be set before initializing placeholders.")

        self.fx = fx 
        self.fy = fy 
        self.cx = self.image_width / 2.0
        self.cy = self.image_height / 2.0

        self.K = np.array([[self.fx, 0, self.cx],
                           [0, self.fy, self.cy],
                           [0, 0, 1]], dtype=np.float32)
        
        # Placeholder distortion coefficients: (k1, k2, p1, p2, k3) - common 5-parameter model for OpenCV
        self.dist_coeffs = np.zeros((5, 1), dtype=np.float32) 
        
        print(f"Initialized CameraParams with placeholder K:\n{self.K}")
        print(f"Initialized CameraParams with placeholder dist_coeffs:\n{self.dist_coeffs.T}")


    def load_calibration(self, file_path: str) -> bool:
        """
        Loads camera calibration data (camera matrix, distortion coefficients, image dimensions)
        from a YAML file generated by `scripts/calibrate_camera.py` or a compatible format.

        Args:
            file_path (str): Path to the YAML calibration file.

        Returns:
            bool: True if loading and validation were successful, False otherwise.
        """
        try:
            with open(file_path, 'r') as f:
                data = yaml.safe_load(f)
            
            if 'camera_matrix' not in data or 'dist_coeffs' not in data:
                print(f"Error: 'camera_matrix' or 'dist_coeffs' not found in {file_path}")
                return False

            self.K = np.array(data['camera_matrix'], dtype=np.float32)
            self.dist_coeffs = np.array(data['dist_coeffs'], dtype=np.float32)
            
            # Optionally load image dimensions if stored, otherwise use defaults or placeholder init values
            self.image_width = data.get('image_width', self.image_width)
            self.image_height = data.get('image_height', self.image_height)
            
            # Validate K and dist_coeffs shapes (basic check)
            if self.K.shape != (3,3):
                print(f"Error: Loaded camera_matrix has incorrect shape: {self.K.shape}. Expected (3,3).")
                return False
            # dist_coeffs can have variable length (4, 5, 8, 12, 14 elements)
            if not (4 <= self.dist_coeffs.size <= 14):
                 print(f"Warning: Loaded dist_coeffs has unusual size: {self.dist_coeffs.size}. Common sizes are 4, 5, 8, 12, or 14.")
            
            # Ensure fx, fy, cx, cy attributes are consistent with the loaded K matrix
            self.fx = self.K[0, 0]
            self.fy = self.K[1, 1]
            self.cx = self.K[0, 2]
            self.cy = self.K[1, 2]

            return True
        except FileNotFoundError:
            print(f"Error: Calibration YAML file not found at {file_path}")
            return False
        except yaml.YAMLError as e:
            print(f"Error parsing YAML file {file_path}: {e}")
            return False
        except Exception as e:
            print(f"An unexpected error occurred while loading calibration from {file_path}: {e}")
            return False

    def get_K(self) -> np.ndarray:
        """
        Returns the camera intrinsic matrix (K).

        Returns:
            numpy.ndarray: The 3x3 camera matrix. If not initialized, it will attempt
                           to initialize with placeholders before returning.
        """
        if self.K is None:
            print("Warning: Camera matrix K was not initialized prior to get_K(). Attempting placeholder initialization.")
            self._initialize_placeholders() 
        return self.K

    def get_dist_coeffs(self) -> np.ndarray:
        """
        Returns the distortion coefficients.
        The format is typically [k1, k2, p1, p2, k3, ...].

        Returns:
            numpy.ndarray: The distortion coefficients vector. If not initialized, it will attempt
                           to initialize with placeholders before returning.
        """
        if self.dist_coeffs is None:
            print("Warning: Distortion coefficients were not initialized prior to get_dist_coeffs(). Attempting placeholder initialization.")
            self._initialize_placeholders()
        return self.dist_coeffs

    def get_image_dimensions(self) -> tuple[int, int]:
        """
        Returns the image width and height associated with the camera parameters.
        These are typically loaded from the calibration file or set as defaults.

        Returns:
            tuple[int, int]: (image_width, image_height)
        """
        return self.image_width, self.image_height

if __name__ == '__main__':
    # Example Usage
    print("--- Example 1: Using Placeholders (no file provided) ---")
    params_placeholder = CameraParams(default_image_width=1280, default_image_height=720)
    print("K (placeholder):")
    print(params_placeholder.get_K())
    print("Dist Coeffs (placeholder):")
    print(params_placeholder.get_dist_coeffs().T)
    print(f"Image Dimensions: {params_placeholder.get_image_dimensions()}")

    print("\n--- Example 2: Attempting to load from a non-existent file ---")
    params_non_existent_file = CameraParams(calibration_file_path="data/non_existent_calibration.yaml")
    # This will print warnings and use placeholders.

    # --- Example 3: Loading from an existing file (requires a dummy file) ---
    # Create a dummy calibration file for testing
    dummy_calib_file = "data/dummy_camera_calibration.yaml"
    os.makedirs(os.path.dirname(dummy_calib_file), exist_ok=True)
    dummy_data = {
        'camera_matrix': [[500.0, 0.0, 320.0], [0.0, 500.0, 240.0], [0.0, 0.0, 1.0]],
        'dist_coeffs': [[0.1, -0.05, 0.001, 0.001, 0.02]], # Note: list of lists for YAML
        'image_width': 640,
        'image_height': 480
    }
    with open(dummy_calib_file, 'w') as f:
        yaml.dump(dummy_data, f)
    
    print(f"\n--- Example 3: Loading from existing file: {dummy_calib_file} ---")
    params_loaded = CameraParams(calibration_file_path=dummy_calib_file)
    if params_loaded.K is not None: # Check if loading was successful indirectly
        print("K (loaded):")
        print(params_loaded.get_K())
        print("Dist Coeffs (loaded):")
        print(params_loaded.get_dist_coeffs().T)
        print(f"Image Dimensions (loaded): {params_loaded.get_image_dimensions()}")
    else:
        print("Failed to load dummy calibration for Example 3, K is None.")

    # Clean up dummy file
    # os.remove(dummy_calib_file)
    print(f"\nNote: Dummy file {dummy_calib_file} was created for testing load functionality.")
    print("You might want to remove it or use a real calibration file.")
